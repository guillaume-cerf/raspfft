[
    {
        "view_id": 3037088848,
        "view_class": "HelpView",
        "time": "2018-03-18T13:21:25.942712",
        "sequence": "ShowView"
    },
    {
        "text_widget_class": "CodeViewText",
        "editor_id": 3037030864,
        "time": "2018-03-18T13:21:26.566209",
        "editor_class": "Editor",
        "text_widget_id": 3037029872,
        "sequence": "EditorTextCreated"
    },
    {
        "text_widget_class": "CodeViewText",
        "editor_id": 3037030864,
        "time": "2018-03-18T13:21:26.572010",
        "editor_class": "Editor",
        "filename": "/home/pi/IHM finale/mainIHM_ebauche_finale.py",
        "text_widget_id": 3037029872,
        "sequence": "Open"
    },
    {
        "text_widget_class": "CodeViewText",
        "time": "2018-03-18T13:21:27.641306",
        "index1": "1.0",
        "text_widget_id": 3037029872,
        "index2": "2.0",
        "sequence": "TextDelete"
    },
    {
        "tags": "()",
        "text_widget_class": "CodeViewText",
        "index": "1.0",
        "time": "2018-03-18T13:21:27.822932",
        "text": "import sys #impose par QT\nimport os\nfrom PyQt4.QtCore import * #impose par QT\nfrom PyQt4.QtGui import * #impose par QT\nfrom PyQt4 import *\nimport time  #pour nommer le fichier txt final\n\n\nfrom page_reglagesv2 import Ui_Reglages\nfrom page_acquisitionzaloeilv2 import Ui_Acquisition\nfrom numpy import linspace\nfrom numpy import fft  #OU from scipy.fftpack import fft #on fait enuite uniquement fft(blabla)\n\n#pour l'accelero :\nimport Reglages_accelero         #nom du fichier python dont la fonction maj_reglages permet d'ecrire dans le registre les nouveaux reglages\nimport FIFO                 #FIFO.go() permet d'enregistrer le fifo\nfrom FuncWriteReg import Write\nimport ADXL362\nimport Offset\n\n##------------ Fenetre ACQUISITION avec relations\n\nclass Interface_Acquisition(QWidget): #pour une autre fenetre, ca peut etre QDialog ou QMainWindow ou QWidget\n    def __init__(self):\n        QWidget.__init__(self) #Appel explicite du constructeur de la classe mere, impose par python\n\n        #Instanciation et initialisation de l'interface Qt\n        self.ui = Ui_Acquisition() #class creee par Qt METTRE UN VRAI NOM\n        self.ui.setupUi(self)       #on lance la fonction definie dans la class\n        \n        \n        #initialisation parametres\n        global etat_comboBox_freq, etat_comboBox_accel,etat_comboBox_nbech, begin,accelero  #en global pour dialoguer entre acquisition et reglages\n\n        self.ui.checkBox_accelx.setChecked(True) #par defaut coche ---- setChecked ou setCheckState\n        self.ui.checkBox_accely.setChecked(True) #par defaut coche\n        self.ui.checkBox_accelz.setCheckState(False) #par defaut non coche\n        self.ui.comboBox_FourrierTempo.setCurrentIndex(0) #par defaut indice 0 donc temporel\n        self.ui.progressBar.setValue(0)  #pour dire quelle valeur mettre (de 0 a 100) ou .value() pour consulter\n        etat_comboBox_freq = 0 #par defaut 200Hz\n        etat_comboBox_accel = 0 #par defaut 2g\n        etat_comboBox_nbech = 0 #par defaut 128\n        \n        begin=True  #on commence\n        self.offset=False\n        accelero=ADXL362.ADXL362()  #initialisation de l'accelerometre\n        Write(0x28,2)       #activation du FIFO et desactivation de la temperature\n\n        self.init_listes() #initialise une premiere fois les listes\n        self.afficher() #pour un premier affichage du matplotlib vide mais avec legende etc\n\n        self.action_Reglages() #on part directement sur la page reglages (apres on revient et les relations sont crees)\n        \n        # definition relations\n        self.connect(self.ui.PushButton_Fermer, SIGNAL('clicked()'), self.action_Fermer)\n        self.connect(self.ui.PushButton_Init, SIGNAL('clicked()'), self.action_initialisation)\n        self.connect(self.ui.PushButton_Nouveau, SIGNAL('clicked()'), self.action_Nouveau)\n        self.connect(self.ui.PushButton_Reglages, SIGNAL('clicked()'), self.action_Reglages)\n        self.connect(self.ui.PushButton_Exporter, SIGNAL('clicked()'), self.action_Exporter)\n        self.connect(self.ui.comboBox_FourrierTempo, SIGNAL('currentIndexChanged(int)'), self.action_modif_affichage)\n        self.connect(self.ui.checkBox_accelx, SIGNAL('clicked()'), self.action_modif_affichage) #ou stateChanged(int)\n        self.connect(self.ui.checkBox_accely, SIGNAL('clicked()'), self.action_modif_affichage)\n        self.connect(self.ui.checkBox_accelz, SIGNAL('clicked()'), self.action_modif_affichage)\n        \n        \n    def action_Fermer(self):\n        global interface\n        print('go fermer')\n        interface=0 #sans espace\n        \n    def action_initialisation(self):\n        '''prends l'offset quand on clique sur initialisation'''\n        global accelero\n        self.ui.progressBar.setValue(0)\n\n        self.init_listes() #initialise les listes\n        self.afficher()\n        \n        self.valoffset = Offset.offset(100,param[0],accelero) #pour enlever la composante statique\n\n        self.ui.progressBar.setValue(100)\n        time.sleep(2) #on attend 1s avant de remettre a 0\n        self.ui.progressBar.setValue(0)\n        self.offset=True #on a bien pris l'offset\n        print(\"prise de l'offset : \",self.valoffset)\n        \n    def action_Nouveau(self):\n        print('go nouveau')\n        if self.offset: #si on a fait l'offset\n            self.ui.progressBar.setValue(0) #mise a 0\n            self.acquerir()    \n            self.afficher()\n            self.ui.progressBar.setValue(100) #mise a 100 fictive\n        \n    def action_Reglages(self):\n        global interface2\n        print('go reglages')\n        interface2 = Interface_Reglages()\n        interface2.show()\n        \n    def action_Exporter(self):\n        print('go exporter')\n        self.name = '/home/pi/Documents/Mesures/'+time.strftime(\"%d:%m:%Y-%T\")+'.txt' # creation nom fichier txt avec jj:mm:aaaa-h:min:s\n        print('adresse fichier : ',self.name)\n        self.memorise_txt()\n        self.name = 'leafpad '+self.name\n        print(self.name)\n        os.system(self.name)  #pour ouvrir le fichier txt cree, l'utilisateur fait enregistrer sous sa cle usb\n        \n        \n    def action_modif_affichage(self):\n        print(self.ui.checkBox_accelx.checkState()) #renvoie 0 ou 2\n        print(self.ui.checkBox_accely.checkState())\n        print(self.ui.checkBox_accelz.checkState())\n        print(self.ui.comboBox_FourrierTempo.currentIndex())  # .currentText  ou .currentIndex(0 ou 1)\n        self.afficher()\n\n\n    def acquerir(self):\n        \"\"\"a pour but d'acquerir les donnees accelero et les rend fonctionnelles\"\"\"\n        global param, accelero\n        #declenchement par amplitude avant\n        \n        self.init_listes() #on reinitialise les 3 listes d'accel\n        \n        self.ui.progressBar.setValue(25)      \n        Atot,saturation,mauvaisaxe = FIFO.FIFO(param[2],param[0],self.valoffset,accelero) #liste des triplets issus du fifo (384/2/3 = 64 donnees par axe)\n        self.ui.progressBar.setValue(75)\n        \n        N=len(Atot) #nb triplets mesures\n        print('Nb triplets acquis =',N)\n        fe = param[1]   #on prend freq echant\n        tmax = (N-1)/fe\n        \n        self.T = linspace(0,tmax,N)\n        self.F = linspace(0,fe,N)\n        self.F=self.F[0:N//2] #on coupe a la moitie Shannon\n\n        for i in range(N):\n            self.A1.append(Atot[i][0])  #ecriture accel en x\n            self.A2.append(Atot[i][1])\n            self.A3.append(Atot[i][2])\n\n        self.TF1=2*abs(fft.fft(self.A1))/N  #TF de l'acceleration en x\n        self.TF1=self.TF1[0:N//2]\n        self.TF2=2*abs(fft.fft(self.A2))/N  #TF de l'acceleration en y\n        self.TF2=self.TF2[0:N//2]\n        self.TF3=2*abs(fft.fft(self.A3))/N  #TF de l'acceleration en z\n        self.TF3=self.TF3[0:N//2]\n\n        for i in range(N):   ##on raccourci les nombres en CS --- (INUTILE SI ENTIERS)\n            self.T[i]=self.nCS(self.T[i])\n            self.A1[i]=self.nCS(self.A1[i])\n            self.A2[i]=self.nCS(self.A2[i])\n            self.A3[i]=self.nCS(self.A3[i])\n            if i<N//2:\n                self.F[i]=self.nCS(self.F[i])\n                self.TF1[i]=self.nCS(self.TF1[i])\n                self.TF2[i]=self.nCS(self.TF2[i])\n                self.TF3[i]=self.nCS(self.TF3[i])\n        \n    def afficher(self):\n        \"\"\"affiche le graphe avec les courbes choisies\"\"\"\n        self.X1=[]\n        self.X2=[]\n        self.X3=[]\n        self.Y1=[] #on affichera tout le temps X1,X2,X3,Y1,Y2,Y3 quitte a etre vide, sont nos variables d'affiachage\n        self.Y2=[]\n        self.Y3=[]\n        self.c1=self.ui.checkBox_accelx.checkState() #lecture etat checkbox 0 ou 2\n        self.c2=self.ui.checkBox_accely.checkState()\n        self.c3=self.ui.checkBox_accelz.checkState()\n        self.c4=self.ui.comboBox_FourrierTempo.currentIndex() #1 pour Fourrier et 0 pour temporel\n        \n        if self.c1==2 and self.c4==0:  #si accelx coche et temporel\n            self.Y1=self.A1\n            self.X1=self.T\n        if self.c2==2 and self.c4==0:\n            self.Y2=self.A2\n            self.X2=self.T\n        if self.c3==2 and self.c4==0:\n            self.Y3=self.A3\n            self.X3=self.T\n\n        if self.c1==2 and self.c4==1:  #si accelx coche et Fourrier\n            self.Y1=self.TF1\n            self.X1=self.F\n        if self.c2==2 and self.c4==1:\n            self.Y2=self.TF2\n            self.X2=self.F\n        if self.c3==2 and self.c4==1:\n            self.Y3=self.TF3\n            self.X3=self.F\n\n            \n        self.ui.matplotlibwidget.axes.hold(False) #on tej le plot precedent et n'est pas ce qui supprime les titres  \n        self.ui.matplotlibwidget.axes.plot(self.X1,self.Y1,'r-')   # . pour avoir les points et - pour les relier --> par exemple'r.-'  \n        self.ui.matplotlibwidget.axes.hold(True) #on maintient\n        self.ui.matplotlibwidget.axes.plot(self.X2,self.Y2,'b-')\n        self.ui.matplotlibwidget.axes.hold(True)\n        self.ui.matplotlibwidget.axes.plot(self.X3,self.Y3,'g-')\n        \n        self.ui.matplotlibwidget.axes.set_title('Accelerations') #a repeter car supprimer par le replot\n        self.ui.matplotlibwidget.axes.set_ylabel('Amplitude') #ou xscale\n        self.ui.matplotlibwidget.axes.set_xlabel('t(s) ou f(Hz)')\n        \n        self.ui.matplotlibwidget.draw() ##important\n        \n    \n    \n    \n    def memorise_txt(self): #il faut avoir fait nouveau pour tester\n        \"\"\"passe les donnees dans un fichier txt\"\"\"\n        global param        \n        fich=open(self.name,'w') #defini dans action_exporter\n        fich.write('gamme acceleration : +-')\n        fich.write(str(param[0]))\n        fich.write('g ;    frequence echantillonnage : ')\n        fich.write(str(param[1]))\n        fich.write('Hz ;   Nombre de triplets [x,y,z] : ')\n        fich.write(str(param[2]))\n        fich.write('t(s);Ax(g);Ay(g);Az(g);F(Hz);TF(Ax);TF(Ay);TF(Az)\\n')\n        for i in range(len(self.T)):\n            a,b,c,d=str(self.T[i]),str(self.A1[i]),str(self.A2[i]),str(self.A3[i])\n            if i<len(self.F):\n                e,f,g,h=str(self.F[i]),str(self.TF1[i]),str(self.TF2[i]),str(self.TF3[i])\n            else:\n                e,f,g,h='','','',''\n            a,b,c,d,e,f,g,h=a.replace('.',','),b.replace('.',','),c.replace('.',','),d.replace('.',','),e.replace('.',','),f.replace('.',','),g.replace('.',','),h.replace('.',',') #on remplace . en , pour traitement excel\n            fich.write(a)\n            fich.write(';') ##avec ; tout le temps pour bien separer et avoir un passage propre sur excel\n            fich.write(b)\n            fich.write(';')\n            fich.write(c)\n            fich.write(';')\n            fich.write(d)\n            fich.write(';')\n            fich.write(e)\n            fich.write(';')\n            fich.write(f)\n            fich.write(';')\n            fich.write(g)\n            fich.write(';')\n            fich.write(h)\n            fich.write('\\n')\n        fich.close()\n\n\n    def init_listes(self):\n        '''initialise toutes les listes pour pouvoir les reecrire pour chaque nouveau'''\n\n        self.T =[]  #ensemble des temps\n        self.F=[]   #futur ensemble des frequences pour fft\n        self.A1=[]  #ensemble des accel en x\n        self.A2=[]  #ensemble des accel en y\n        self.A3=[]  #ensemble des accel en z\n        self.TF1 =[] #futur ensemble des TF pour A1\n        self.TF2 =[] #futur ensemble des TF pour A2\n        self.TF3 =[] #futur ensemble des TF pour A3\n\n    \n        \n \n    def nCS(self,nombre):     ##### INUTILE SI ON TRAITE DES NOMBRES ENTIERS OU AVEC PEU DE DECIMALES\n        \"\"\"reduit les chiffres signicatifs a n\"\"\"\n        n=3\n        facteur=10**n\n        return int(facteur*nombre)/facteur\n\n    \n\n\n#time.localtime()[0] pour avoir l'annee ou time.time() pour avoir le temps (s depuis 40 ans)\n\n\n\n          \n\n\n###----------------Fenetre REGLAGES avec relations\n        \nclass Interface_Reglages(QWidget): #pour une autre fenetre, ca peut etre QDialog ou QMainWindow ou QWidget\n    def __init__(self):\n        global begin\n        QWidget.__init__(self) #Appel explicite du constructeur de la classe mere, impose par python\n        \n        #Instanciation et initialisation de l'interface Qt\n        self.ui2 = Ui_Reglages()\n        self.ui2.setupUi(self)\n\n        if begin: #si c'est le premier affichage des reglages on change le nom et plus tard la fonctionnalite du bouton retour\n            self.ui2.PushButton_retour.setText(\"Fermer\")\n            \n        #initialisation combobox\n        self.ui2.comboBox_freq.setCurrentIndex(etat_comboBox_freq) #pour memoriser ce qui a ete fait avant\n        self.ui2.comboBox_accel.setCurrentIndex(etat_comboBox_accel)\n\n        self.action_maj_affichage() #init de l'affichage\n        \n        self.connect(self.ui2.PushButton_retour, SIGNAL('clicked()'), self.action_retour)\n        self.connect(self.ui2.PushButton_valider, SIGNAL('clicked()'), self.action_valider)\n        self.connect(self.ui2.comboBox_freq, SIGNAL('currentIndexChanged(int)'), self.action_maj_affichage)\n        self.connect(self.ui2.comboBox_nbech, SIGNAL('currentIndexChanged(int)'), self.action_maj_affichage)\n\n    def action_retour(self):\n        global interface2, begin, interface\n        print('go retour')\n        if not(begin):   #si on ne commence pas on peut faire retour\n            interface2=0 #sans enregistrer les modif\n        else:           #si on commence, retour est equivalent a quitter tout\n            interface=0\n            interface2=0\n        print(begin)\n\n    def action_valider(self):\n        global etat_comboBox_freq, etat_comboBox_accel,etat_comboBox_nbech, interface2, begin, param, accelero\n        print('go valider')\n        etat_comboBox_freq = self.ui2.comboBox_freq.currentIndex()\n        etat_comboBox_accel = self.ui2.comboBox_accel.currentIndex()\n        etat_comboBox_nbech = self.ui2.comboBox_nbech.currentIndex()\n        print(etat_comboBox_accel)\n        print(etat_comboBox_freq)\n        print(etat_comboBox_nbech)\n\n        param = self.interpretation_param(etat_comboBox_accel,etat_comboBox_freq,etat_comboBox_nbech) #au cas ou on ne change que l'accel on ne passe pas par action_modif_affichage\n        \n        Reglages_accelero.maj_reglages(param[0],param[1],accelero)  #on met a jour les reglages de l'accelero\n\n        begin=False   #on a donc fait un premier reglage\n        \n\n        interface2=0\n\n    def action_maj_affichage(self):\n        '''met a jour l'affichage quand on change les valeurs des comboboxs'''\n        global param\n        param = self.interpretation_param(self.ui2.comboBox_accel.currentIndex(),self.ui2.comboBox_freq.currentIndex(),self.ui2.comboBox_nbech.currentIndex())\n        valfmax=str(int(param[1]/2/1.28))+' Hz'\n        resolution=str(int(100*param[1]/param[2])/100)+' Hz' #precision au 1/100 Hz\n        self.ui2.label_valfmax.setText(valfmax)\n        self.ui2.label_valresolution.setText(resolution)\n        print(valfmax)\n        print(resolution)\n\n    def interpretation_param(self,comboBox_accel,comboBox_freq,comboBox_nbech): #en argument pour ne pas toucher aux etats_comBox_ de maniere definitive\n        '''donne [accel,freq,nbech]'''\n        param=[]\n        #test accel\n        if comboBox_accel==0:  #2g\n            accel=2\n        elif comboBox_accel==1:  #4g\n            accel=4\n        else:\n            accel=8\n        #test freq\n        if comboBox_freq==0: #100Hz\n            freq=100\n        elif comboBox_freq==1: #200Hz\n            freq=200\n        else:                       #400Hz\n            freq=400\n        #test nbech    \n        if comboBox_nbech==0: #128 points\n            nbech=128\n        elif comboBox_nbech==1:\n            nbech=256\n        elif comboBox_nbech==2:\n            nbech=512\n        else:\n            nbech=1024\n        param.append(accel)\n        param.append(freq)\n        param.append(nbech)\n\n        print(param)\n        return param\n    \n###Reglages.showFullScreen()\n###Reglages.showMaximized()\n\n#C:\\Users\\cyril\\Downloads\\WinPython-32bit-3.3.5.9\\python-3.3.5\\Lib\\site-packages\\PyQt4\\doc\\html   qcheckbox etc    \n\n\n\n###------------- Lesture du MAIN pour lancer l'algo\n\n#Test de l'application\nif __name__==\"__main__\":\n    appUI = QApplication(sys.argv) #Instanciation de l'application (pour intercepter les mouvements de souris etc...)\n    interface = Interface_Acquisition() #Instanciation de l'interface\n    #interface = Interface_Reglages()  #l'un ou l'autre pour les tests\n    ##interface.resize(680,320)\n    ##interface.showMaximized()  ##pas utile car n'est lu qu'une fois\n    interface.show() #Affichage de l'interface\n    sys.exit(appUI.exec_()) #Execution de l'application\n    \n \n",
        "text_widget_id": 3037029872,
        "sequence": "TextInsert"
    },
    {
        "view_id": 3037088848,
        "view_class": "HelpView",
        "time": "2018-03-18T13:21:27.997975",
        "sequence": "ShowView"
    },
    {
        "view_id": 3036954224,
        "view_class": "ShellView",
        "time": "2018-03-18T13:21:28.004385",
        "sequence": "ShowView"
    },
    {
        "tags": "('welcome',)",
        "text_widget_class": "ShellText",
        "index": "1.0",
        "time": "2018-03-18T13:21:39.930309",
        "text_widget_context": "shell",
        "text": "Python 3.4.2 (/usr/bin/python3)",
        "text_widget_id": 3036953872,
        "sequence": "TextInsert"
    },
    {
        "tags": "('io',)",
        "text_widget_class": "ShellText",
        "index": "1.31",
        "time": "2018-03-18T13:21:39.952577",
        "text_widget_context": "shell",
        "text": "\n",
        "text_widget_id": 3036953872,
        "sequence": "TextInsert"
    },
    {
        "tags": "('toplevel', 'prompt')",
        "text_widget_class": "ShellText",
        "index": "2.0",
        "time": "2018-03-18T13:21:39.960593",
        "text_widget_context": "shell",
        "text": ">>> ",
        "text_widget_id": 3036953872,
        "sequence": "TextInsert"
    },
    {
        "widget_class": "Workbench",
        "widget_id": 3058497840,
        "time": "2018-03-18T13:21:40.002657",
        "sequence": "<FocusIn>"
    },
    {
        "sequence": "<Button-1>",
        "time": "2018-03-18T13:21:45.686129",
        "widget": ".#3037836912"
    },
    {
        "widget_class": "Workbench",
        "widget_id": 3058497840,
        "time": "2018-03-18T13:21:45.706657",
        "sequence": "<FocusOut>"
    },
    {
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "time": "2018-03-18T13:21:54.717056",
        "index1": "2.4",
        "text_widget_id": 3036953872,
        "index2": "3.0",
        "sequence": "TextDelete"
    },
    {
        "tags": "('automagic', 'toplevel', 'command')",
        "text_widget_class": "ShellText",
        "index": "2.4",
        "time": "2018-03-18T13:21:54.723758",
        "text_widget_context": "shell",
        "text": "%Run mainIHM_ebauche_finale.py\n",
        "text_widget_id": 3036953872,
        "sequence": "TextInsert"
    },
    {
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "time": "2018-03-18T13:21:54.758158",
        "index1": "3.0",
        "text_widget_id": 3036953872,
        "index2": "3.0",
        "sequence": "TextDelete"
    },
    {
        "cmd_line": "%Run mainIHM_ebauche_finale.py\n",
        "time": "2018-03-18T13:21:54.776766",
        "sequence": "MagicCommand"
    },
    {
        "time": "2018-03-18T13:21:56.786103",
        "command_text": "%Run mainIHM_ebauche_finale.py\n",
        "sequence": "ShellCommand"
    },
    {
        "denied": "False",
        "time": "2018-03-18T13:21:56.787359",
        "command_id": "run_current_script",
        "sequence": "Command"
    },
    {
        "sequence": "<Button-1>",
        "time": "2018-03-18T13:21:56.835129",
        "widget": ".#3037836912"
    },
    {
        "widget_class": "Workbench",
        "widget_id": 3058497840,
        "time": "2018-03-18T13:21:56.962931",
        "sequence": "<FocusIn>"
    },
    {
        "denied": "True",
        "time": "2018-03-18T13:21:59.861980",
        "command_id": "run_current_script",
        "sequence": "Command"
    }
]