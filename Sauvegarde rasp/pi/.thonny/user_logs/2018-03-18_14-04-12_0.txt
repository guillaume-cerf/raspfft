[
    {
        "time": "2018-03-18T14:04:12.731486",
        "sequence": "ShowView",
        "view_class": "HelpView",
        "view_id": "HelpView"
    },
    {
        "editor_id": 3037186672,
        "editor_class": "Editor",
        "time": "2018-03-18T14:04:13.363989",
        "text_widget_id": 3037186768,
        "sequence": "EditorTextCreated",
        "text_widget_class": "CodeViewText"
    },
    {
        "editor_id": 3037186672,
        "editor_class": "Editor",
        "time": "2018-03-18T14:04:13.369543",
        "text_widget_id": 3037186768,
        "sequence": "Open",
        "filename": "/home/pi/IHM finale/ADXL362.py",
        "text_widget_class": "CodeViewText"
    },
    {
        "index2": "2.0",
        "index1": "1.0",
        "time": "2018-03-18T14:04:14.438979",
        "text_widget_id": 3037186768,
        "sequence": "TextDelete",
        "text_widget_class": "CodeViewText"
    },
    {
        "tags": "()",
        "text": "############################################################\n### Library for Communicating with ADXL362 Accelerometer ###\n### for Raspberry Pi using spidev                        ###\n###                                                      ###\n### Authors: Sam Zeckendorf                              ###\n###          Nathan Tarrh                                ###\n###    Date: 3/29/2014                                   ###\n############################################################\n\n# spidev is the Raspberry Pi spi communication library\nimport spidev\nimport time\n\nclass ADXL362:\n\n    def __init__(self, device=0, ce_pin=0):\n        \"\"\"\n        device: the SPI device (often 0)\n\n        ce_pin: pass 0 for CE0, 1 for CE1, etc.\n\n        device and ce_pin map to device file /dev/spidev{device}.{ce_pin}\n        \"\"\"\n\n        # init spi for communication\n        self.spi = spidev.SpiDev()      #Creation d'un objet spi\n        self.spi.open(device, ce_pin)   # (x,0) == CE0, (x,1) == CE1\n\n        # Set clock phase and polarity to default\n        self.spi.mode = 0b00        #Polarite et phase de l'horloge a zero\n        time.sleep(.5)\n      \n        self.spi_write_reg(0x1F, 0x52)  #Soft reset\n        time.sleep(.01)\n\n        print('Soft reset')\n    \n    def spi_write_reg(self, address, value):\n        ''' Write value to address\n            Arguments:\n                - address: Hexidecimal value of register address\n                -   value: Desired hexidecimal byte to write\n        '''\n        # Send instruction (write), address, and value\n        self.spi.xfer2([0x0A, address, value])\n        \n    def spi_read_reg(self, address):\n        ''' Read contents of register at specified address\n            Arguments:\n                - address: Hexidecimal value of register address\n            Returns:\n                - value at address\n        '''\n\n        # Send instruction (read)\n        response = self.spi.xfer2([0x0B, address, 0x00])\n        return response[-1]\n\n    def begin_measure(self):\n        ''' Turn on measurement mode, required after reset\n        '''\n        self.spi.cshigh = False     #Chip Select deactivated\n        \n        # Read in current value in power control register\n        pc_reg = self.spi_read_reg(0x2D)\n        \n        # Mask measurement mode onto power control buffer\n        ##Description : superposition en binaire, lance la mesure des \n        ##accelerations tout en gardant les parametres precedents de 0x2D\n        ###Exemple : 1001|1010=1011 soit 9|10=11, ou 45|48=61\n        pc_reg_new = pc_reg | 0x02\n\n        # Write new power control buffer to register\n        self.spi_write_reg(0x2D, pc_reg_new)\n\n        self.spi.cshigh = True      #CS activated\n        time.sleep(.01)\n\n    def read_x(self):\n        ''' Read the x value\n            Returns:\n                - Value of ug in x direction\n        '''\n        x = self.spi_read_two(0x0E)     #lecture des deux octets consecutifs\n        return x\n\n    def read_y(self):\n        ''' Read the y value\n            Returns:\n                - Value of ug in the y direction\n        '''\n        y = self.spi_read_two(0x10)\n        return y\n\n    def read_z(self):\n        ''' Read the z value\n            Returns:\n                - Value of ug in the z direction\n        '''\n        z = self.spi_read_two(0x12)\n        return z\n\n    def read_temp(self):\n        ''' Read the temperature value (for calibration/correlation)\n            Returns:\n                - Internal device temperature\n        '''\n        temp = self.spi_read_two(0x14)\n        return temp\n\n    def read_xyz(self):\n        ''' Read x, y, and z data in burst mode. A burst read is required to\n            guarantee all measurements correspond to the same sample time.\n            Returns:\n                - Tuple with x, y, z, and temperature data\n        '''\n        self.spi.cshigh = False     #Permet d'avoir les donnees au mm moment\n        x = self.read_x()\n        y = self.read_y()\n        z = self.read_z()\n        temp = self.read_temp()\n\n        self.spi.cshigh = True\n        return (x, y, z, temp)\n        \n    def spi_read_two(self, address):\n        ''' Read two sequential registers : one axis is coded on 16bits\n            Arguments: \n                - address: Hexidecimal address of first register to read from\n            Returns: \n                - Value contained within said two registers\n        '''\n       \n        # Send read instruction\n        ##Faire attention, le premier argument est ici 0x0B, pour la lecture,  \n        ##et non 0x0A pour les \u00e9critures\n        ##Valeur lue en decimal\n        value = self.spi.xfer2([0x0B, address, 0x00, 0x00])\t\t\n      \n        # Isolate low and high bytes from response\n        val_l = value[2]\n        val_h = value[3] << 8   #Multiplie par 2**8 : bit de poids fort\n        \n        # Append low byte and high byte together\n        value = (val_l + val_h) \n\n        # Turn format of response into hexidecimal for parsing\n        ##Plusieurs etapes :\n        ##  a)Codage de value en hexa sous forme '0xaa' en 6 termes mini ici\n        ##  b)Conversion en entier\n        ##  c)Envoi a two_comp pour le signe : complement a 2\n        ###Utilite : independant de type(value), fonctionne en base 2,10,16,...\n        return self.twos_comp(int(\"{0:#0{1}x}\".format(value,6), 16), 16)\n       \n    def spi_write_two(self, address, value):\n        ''' Write to two sequential registers\n            Arguments: \n                - address: Hexidecimal address of first register to write from\n                -   value: Value to be written\n        '''\n        # Split value into high and low bytes for writing\n        high_byte = value >> 8      #Conserve les bits > 8eme\n        low_byte = value & 0xFF     #Conserve les 8bits de poids faible\n       \n        # Send write instruction\n        self.spi.xfer2([0x0A, address, low_byte, high_byte])\n       \n        return value\n    \n    def check_all_regs(self):\n        '''Lit l'ensemble des donnees a partir de 0x20 jusqu'a 0x2E\n        '''\n        instructions = [0x0B, 0x20]\n        registers = [0x00] * 15\n        instructions.extend(registers)\n        values = self.spi.xfer2(instructions)\n        \n        return values[2:]\n\n    def twos_comp(self,val, bits):\n        \"\"\" Returns two's complement of value given a number of bits\n        \"\"\"\n        #Complement a 2: on enleve 2**x si c'est n\u00e9gatif, ainsi on a des\n        #donnees entre (1 - 2**x) et (2**x - 1)\n        if val&(1<<(bits-1)) != 0:      #Si bit n\u00e9gatif actif\n            val = val - (1<<bits)       \n        return val\n\n",
        "time": "2018-03-18T14:04:14.557321",
        "text_widget_id": 3037186768,
        "sequence": "TextInsert",
        "index": "1.0",
        "text_widget_class": "CodeViewText"
    },
    {
        "time": "2018-03-18T14:04:14.712803",
        "sequence": "ShowView",
        "view_class": "HelpView",
        "view_id": "HelpView"
    },
    {
        "time": "2018-03-18T14:04:14.716628",
        "sequence": "ShowView",
        "view_class": "ShellView",
        "view_id": "ShellView"
    },
    {
        "tags": "('welcome',)",
        "text": "Python 3.4.2 (/usr/bin/python3)",
        "text_widget_context": "shell",
        "time": "2018-03-18T14:04:20.179210",
        "text_widget_id": 3037108528,
        "sequence": "TextInsert",
        "index": "1.0",
        "text_widget_class": "ShellText"
    },
    {
        "tags": "('io',)",
        "text": "\n",
        "text_widget_context": "shell",
        "time": "2018-03-18T14:04:20.200345",
        "text_widget_id": 3037108528,
        "sequence": "TextInsert",
        "index": "1.31",
        "text_widget_class": "ShellText"
    },
    {
        "tags": "('toplevel', 'prompt')",
        "text": ">>> ",
        "text_widget_context": "shell",
        "time": "2018-03-18T14:04:20.208572",
        "text_widget_id": 3037108528,
        "sequence": "TextInsert",
        "index": "2.0",
        "text_widget_class": "ShellText"
    },
    {
        "time": "2018-03-18T14:04:20.250085",
        "sequence": "<FocusIn>",
        "widget_class": "Workbench",
        "widget_id": 3058653488
    },
    {
        "sequence": "<Button-1>",
        "widget": ".#3037992560",
        "time": "2018-03-18T14:04:22.192649"
    },
    {
        "time": "2018-03-18T14:04:22.214823",
        "sequence": "<FocusOut>",
        "widget_class": "Workbench",
        "widget_id": 3058653488
    },
    {
        "sequence": "<Button-1>",
        "widget": ".#3037992560.#3037992560#3037046992",
        "time": "2018-03-18T14:04:25.875947"
    },
    {
        "index2": "3.0",
        "index1": "2.4",
        "text_widget_context": "shell",
        "time": "2018-03-18T14:04:25.984635",
        "text_widget_id": 3037108528,
        "sequence": "TextDelete",
        "text_widget_class": "ShellText"
    },
    {
        "tags": "('automagic', 'toplevel', 'command')",
        "text": "%Run ADXL362.py\n",
        "text_widget_context": "shell",
        "time": "2018-03-18T14:04:25.991431",
        "text_widget_id": 3037108528,
        "sequence": "TextInsert",
        "index": "2.4",
        "text_widget_class": "ShellText"
    },
    {
        "index2": "3.0",
        "index1": "3.0",
        "text_widget_context": "shell",
        "time": "2018-03-18T14:04:26.005409",
        "text_widget_id": 3037108528,
        "sequence": "TextDelete",
        "text_widget_class": "ShellText"
    },
    {
        "time": "2018-03-18T14:04:26.013185",
        "sequence": "MagicCommand",
        "cmd_line": "%Run ADXL362.py\n"
    },
    {
        "command_text": "%Run ADXL362.py\n",
        "sequence": "ShellCommand",
        "time": "2018-03-18T14:04:27.562049"
    },
    {
        "time": "2018-03-18T14:04:27.563133",
        "command_id": "run_current_script",
        "sequence": "Command",
        "denied": "False"
    },
    {
        "time": "2018-03-18T14:04:27.568381",
        "sequence": "<FocusIn>",
        "widget_class": "Workbench",
        "widget_id": 3058653488
    },
    {
        "tags": "('toplevel', 'prompt')",
        "text": ">>> ",
        "text_widget_context": "shell",
        "time": "2018-03-18T14:04:27.640335",
        "text_widget_id": 3037108528,
        "sequence": "TextInsert",
        "index": "3.0",
        "text_widget_class": "ShellText"
    },
    {
        "sequence": "<Button-1>",
        "widget": ".#3037992560",
        "time": "2018-03-18T14:04:35.048013"
    },
    {
        "time": "2018-03-18T14:04:35.120047",
        "sequence": "<FocusOut>",
        "widget_class": "Workbench",
        "widget_id": 3058653488
    },
    {
        "sequence": "<Button-1>",
        "widget": ".#3037992560.#3037992560#3037046992",
        "time": "2018-03-18T14:04:37.218970"
    },
    {
        "index2": "4.0",
        "index1": "3.4",
        "text_widget_context": "shell",
        "time": "2018-03-18T14:04:37.369506",
        "text_widget_id": 3037108528,
        "sequence": "TextDelete",
        "text_widget_class": "ShellText"
    },
    {
        "tags": "('automagic', 'toplevel', 'command')",
        "text": "%Run ADXL362.py\n",
        "text_widget_context": "shell",
        "time": "2018-03-18T14:04:37.376780",
        "text_widget_id": 3037108528,
        "sequence": "TextInsert",
        "index": "3.4",
        "text_widget_class": "ShellText"
    },
    {
        "index2": "4.0",
        "index1": "4.0",
        "text_widget_context": "shell",
        "time": "2018-03-18T14:04:37.391195",
        "text_widget_id": 3037108528,
        "sequence": "TextDelete",
        "text_widget_class": "ShellText"
    },
    {
        "time": "2018-03-18T14:04:37.398746",
        "sequence": "MagicCommand",
        "cmd_line": "%Run ADXL362.py\n"
    },
    {
        "command_text": "%Run ADXL362.py\n",
        "sequence": "ShellCommand",
        "time": "2018-03-18T14:04:38.937969"
    },
    {
        "time": "2018-03-18T14:04:38.939044",
        "command_id": "run_current_script",
        "sequence": "Command",
        "denied": "False"
    },
    {
        "time": "2018-03-18T14:04:38.954234",
        "sequence": "<FocusIn>",
        "widget_class": "Workbench",
        "widget_id": 3058653488
    },
    {
        "tags": "('toplevel', 'prompt')",
        "text": ">>> ",
        "text_widget_context": "shell",
        "time": "2018-03-18T14:04:39.026804",
        "text_widget_id": 3037108528,
        "sequence": "TextInsert",
        "index": "4.0",
        "text_widget_class": "ShellText"
    }
]