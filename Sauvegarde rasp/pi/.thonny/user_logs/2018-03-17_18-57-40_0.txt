[
    {
        "view_class": "HelpView",
        "sequence": "ShowView",
        "view_id": 3037600848,
        "time": "2018-03-17T18:57:41.453735"
    },
    {
        "sequence": "EditorTextCreated",
        "editor_id": 3037540432,
        "time": "2018-03-17T18:57:42.076320",
        "editor_class": "Editor",
        "text_widget_class": "CodeViewText",
        "text_widget_id": 3037542160
    },
    {
        "sequence": "Open",
        "editor_id": 3037540432,
        "text_widget_id": 3037542160,
        "time": "2018-03-17T18:57:42.095566",
        "editor_class": "Editor",
        "text_widget_class": "CodeViewText",
        "filename": "/media/pi/USB DISK/ENSAM/2A/Projet Raspberry/Programmation/IHM/mainIHM_ebauche_finale.py"
    },
    {
        "sequence": "TextDelete",
        "text_widget_id": 3037542160,
        "time": "2018-03-17T18:57:43.108482",
        "text_widget_class": "CodeViewText",
        "index2": "2.0",
        "index1": "1.0"
    },
    {
        "sequence": "TextInsert",
        "tags": "()",
        "text_widget_id": 3037542160,
        "time": "2018-03-17T18:57:43.331487",
        "index": "1.0",
        "text_widget_class": "CodeViewText",
        "text": "import sys #impose par QT\nimport os\nfrom PyQt4.QtCore import * #impose par QT\nfrom PyQt4.QtGui import * #impose par QT\nfrom PyQt4 import *\nimport time  #pour nommer le fichier txt final\n\n\nfrom page_reglages import Ui_Reglages\nfrom page_acquisitionzaloeil import Ui_Acquisition\nfrom numpy import linspace\nfrom numpy import fft  #OU from scipy.fftpack import fft #on fait enuite uniquement fft(blabla)\n\n#pour l'accelero :\nimport Reglages_accelero         #nom du fichier python dont la fonction maj_reglages permet d'ecrire dans le registre les nouveaux reglages\nimport FIFO                 #FIFO.go() permet d'enregistrer le fifo\n\n\n##------------ Fenetre ACQUISITION avec relations\n\nclass Interface_Acquisition(QWidget): #pour une autre fenetre, ca peut etre QDialog ou QMainWindow ou QWidget\n    def __init__(self):\n        QWidget.__init__(self) #Appel explicite du constructeur de la classe mere, impose par python\n\n        #Instanciation et initialisation de l'interface Qt\n        self.ui = Ui_Acquisition() #class creee par Qt METTRE UN VRAI NOM\n        self.ui.setupUi(self)       #on lance la fonction definie dans la class\n\n        #initialisation parametres\n        global etat_comboBox_freq, etat_comboBox_accel, begin  #en global pour dialoguer entre acquisition et reglages\n\n        self.ui.checkBox_accelx.setChecked(True) #par defaut coche ---- setChecked ou setCheckState\n        self.ui.checkBox_accely.setChecked(True) #par defaut coche\n        self.ui.checkBox_accelz.setCheckState(False) #par defaut non coche\n        self.ui.comboBox_FourrierTempo.setCurrentIndex(0) #par defaut indice 0 donc temporel\n        self.ui.progressBar.setValue(0)  #pour dire quelle valeur mettre (de 0 a 100) ou .value() pour consulter\n        etat_comboBox_freq = 0 #par defaut 200Hz\n        etat_comboBox_accel = 0 #par defaut 2g\n        begin=True  #on commence\n        \n        self.init_listes() #initialise une premiere fois les listes\n        self.afficher() #pour un premier affichage du matplotlib vide mais avec legende etc\n        self.action_Reglages() #on part directement sur la page reglages (apres on revient et les relations sont crees)\n        \n        # definition relations\n        self.connect(self.ui.PushButton_Fermer, SIGNAL('clicked()'), self.action_Fermer)\n        self.connect(self.ui.PushButton_Nouveau, SIGNAL('clicked()'), self.action_Nouveau)\n        self.connect(self.ui.PushButton_Reglages, SIGNAL('clicked()'), self.action_Reglages)\n        self.connect(self.ui.PushButton_Exporter, SIGNAL('clicked()'), self.action_Exporter)\n        self.connect(self.ui.comboBox_FourrierTempo, SIGNAL('currentIndexChanged(int)'), self.action_modif_affichage)\n        self.connect(self.ui.checkBox_accelx, SIGNAL('clicked()'), self.action_modif_affichage) #ou stateChanged(int)\n        self.connect(self.ui.checkBox_accely, SIGNAL('clicked()'), self.action_modif_affichage)\n        self.connect(self.ui.checkBox_accelz, SIGNAL('clicked()'), self.action_modif_affichage)\n        \n    def action_Fermer(self):\n        global interface\n        print('go fermer')\n        interface=0 #sans espace\n        \n    def action_Nouveau(self):\n        print('go nouveau')\n        self.ui.progressBar.setValue(0) #mise a 0\n        self.acquerir()    \n        self.afficher()\n        self.ui.progressBar.setValue(100) #mise a 100 fictive\n        \n    def action_Reglages(self):\n        global interface2\n        print('go reglages')\n        interface2 = Interface_Reglages()\n        interface2.show()\n        \n    def action_Exporter(self):\n        print('go exporter')\n        self.name = '/home/pi/Documents/Mesures/'+time.strftime(\"%d:%m:%Y-%T\")+'.txt' # creation nom fichier txt avec jj:mm:aaaa-h:min:s\n        print('adresse fichier : ',self.name)\n        self.memorise_txt()\n        self.name = 'leafpad '+self.name\n        print(self.name)\n        os.system(self.name)  #pour ouvrir le fichier txt cree, l'utilisateur fait enregistrer sous sa cle usb\n        \n        \n    def action_modif_affichage(self):\n        print(self.ui.checkBox_accelx.checkState()) #renvoie 0 ou 2\n        print(self.ui.checkBox_accely.checkState())\n        print(self.ui.checkBox_accelz.checkState())\n        print(self.ui.comboBox_FourrierTempo.currentIndex())  # .currentText  ou .currentIndex(0 ou 1)\n        self.afficher()\n\n\n    def acquerir(self):\n        \"\"\"a pour but d'acquerir les donnees accelero et les rend fonctionnelles\"\"\"\n\n        #declenchement par amplitude avant\n        \n        self.init_listes() #on reinitialise les 3 listes d'accel\n        \n        Atot = FIFO.FIFO(384,1) #liste des triplets issus du fifo (384/2/3 = 64 donnees par axe)\n\n        N=len(Atot) #nb triplets mesures\n        print('Nb triplets acquis =',N)\n        fe = self.interpretation_param()[1]   #on prend freq echant\n        tmax = (N-1)/fe\n        \n        self.T = linspace(0,tmax,N)\n        self.F = linspace(0,fe,N)\n        self.F=self.F[0:N//2] #on coupe a la moitie Shannon\n\n        for i in range(N):\n            self.A1.append(Atot[i][0])  #ecriture accel en x\n            self.A2.append(Atot[i][1])\n            self.A3.append(Atot[i][2])\n\n        self.TF1=2*abs(fft.fft(self.A1))/N  #TF de l'acceleration en x\n        self.TF1=self.TF1[0:N//2]\n        self.TF2=2*abs(fft.fft(self.A2))/N  #TF de l'acceleration en y\n        self.TF2=self.TF2[0:N//2]\n        self.TF3=2*abs(fft.fft(self.A3))/N  #TF de l'acceleration en z\n        self.TF3=self.TF3[0:N//2]\n\n##        for i in range(N):   ##on raccourci les nombres en CS --- INUTILE SI ENTIERS\n##            self.T[i]=self.nCS(self.T[i])\n##            if i<N//2:\n##                self.F[i]=self.nCS(self.F[i])\n##                self.TF1[i]=self.nCS(self.TF1[i])\n##                self.TF2[i]=self.nCS(self.TF2[i])\n##                self.TF3[i]=self.nCS(self.TF3[i])\n        \n    def afficher(self):\n        \"\"\"affiche le graphe avec les courbes choisies\"\"\"\n        self.X1=[]\n        self.X2=[]\n        self.X3=[]\n        self.Y1=[] #on affichera tout le temps X1,X2,X3,Y1,Y2,Y3 quitte a etre vide, sont nos variables d'affiachage\n        self.Y2=[]\n        self.Y3=[]\n        self.c1=self.ui.checkBox_accelx.checkState() #lecture etat checkbox 0 ou 2\n        self.c2=self.ui.checkBox_accely.checkState()\n        self.c3=self.ui.checkBox_accelz.checkState()\n        self.c4=self.ui.comboBox_FourrierTempo.currentIndex() #1 pour Fourrier et 0 pour temporel\n        \n        if self.c1==2 and self.c4==0:  #si accelx coche et temporel\n            self.Y1=self.A1\n            self.X1=self.T\n        if self.c2==2 and self.c4==0:\n            self.Y2=self.A2\n            self.X2=self.T\n        if self.c3==2 and self.c4==0:\n            self.Y3=self.A3\n            self.X3=self.T\n\n        if self.c1==2 and self.c4==1:  #si accelx coche et Fourrier\n            self.Y1=self.TF1\n            self.X1=self.F\n        if self.c2==2 and self.c4==1:\n            self.Y2=self.TF2\n            self.X2=self.F\n        if self.c3==2 and self.c4==1:\n            self.Y3=self.TF3\n            self.X3=self.F\n\n            \n        self.ui.matplotlibwidget.axes.hold(False) #on tej le plot precedent et n'est pas ce qui supprime les titres  \n        self.ui.matplotlibwidget.axes.plot(self.X1,self.Y1,'r-')   # . pour avoir les points et - pour les relier --> par exemple'r.-'  \n        self.ui.matplotlibwidget.axes.hold(True) #on maintient\n        self.ui.matplotlibwidget.axes.plot(self.X2,self.Y2,'b-')\n        self.ui.matplotlibwidget.axes.hold(True)\n        self.ui.matplotlibwidget.axes.plot(self.X3,self.Y3,'g-')\n        \n        self.ui.matplotlibwidget.axes.set_title('Accelerations') #a repeter car supprimer par le replot\n        self.ui.matplotlibwidget.axes.set_ylabel('Amplitude') #ou xscale\n        self.ui.matplotlibwidget.axes.set_xlabel('t(s) ou f(Hz)')\n        \n        self.ui.matplotlibwidget.draw() ##important\n        \n    \n    \n    \n    def memorise_txt(self): #il faut avoir fait nouveau pour tester\n        \"\"\"passe les donnees dans un fichier txt\"\"\"\n        param = self.interpretation_param()\n        \n        fich=open(self.name,'w')\n        fich.write('gamme acceleration : +-')\n        fich.write(param[0])\n        fich.write('g ;    frequence echantillonnage : ')\n        fich.write(param[1])\n        fich.write('Hz\\n')\n        fich.write('t(s);Ax(m/s2);Ay(m/s2);Az(m/s2);F(Hz);TF(Ax);TF(Ay);TF(Az)\\n')\n        for i in range(len(self.T)):\n            a,b,c,d=str(self.T[i]),str(self.A1[i]),str(self.A2[i]),str(self.A3[i])\n            if i<len(self.F):\n                e,f,g,h=str(self.F[i]),str(self.TF1[i]),str(self.TF2[i]),str(self.TF3[i])\n            else:\n                e,f,g,h='','','',''\n            a,b,c,d,e,f,g,h=a.replace('.',','),b.replace('.',','),c.replace('.',','),d.replace('.',','),e.replace('.',','),f.replace('.',','),g.replace('.',','),h.replace('.',',') #on remplace . en , pour traitement excel\n            fich.write(a)\n            fich.write(';') ##avec ; tout le temps pour bien separer et avoir un passage propre sur excel\n            fich.write(b)\n            fich.write(';')\n            fich.write(c)\n            fich.write(';')\n            fich.write(d)\n            fich.write(';')\n            fich.write(e)\n            fich.write(';')\n            fich.write(f)\n            fich.write(';')\n            fich.write(g)\n            fich.write(';')\n            fich.write(h)\n            fich.write('\\n')\n        fich.close()\n\n\n    def init_listes(self):\n        '''initialise toutes les listes pour pouvoir les reecrire pour chaque nouveau'''\n\n        self.T =[]  #ensemble des temps\n        self.F=[]   #futur ensemble des frequences pour fft\n        self.A1=[]  #ensemble des accel en x\n        self.A2=[]  #ensemble des accel en y\n        self.A3=[]  #ensemble des accel en z\n        self.TF1 =[] #futur ensemble des TF pour A1\n        self.TF2 =[] #futur ensemble des TF pour A2\n        self.TF3 =[] #futur ensemble des TF pour A3\n \n    def nCS(self,nombre):     ##### INUTILE SI ON TRAITE DES NOMBRES ENTIERS OU AVEC PEU DE DECIMALES\n        \"\"\"reduit les chiffres signicatifs a n\"\"\"\n        n=3\n        facteur=10**n\n        return int(facteur*nombre)/facteur\n\n    def interpretation_param(self):\n        '''donne [accel,freq]'''\n        global etat_comboBox_freq, etat_comboBox_accel\n        param=[]\n        #test accel\n        if etat_comboBox_accel==0:  #2g\n            accel=2\n        elif etat_comboBox_accel==1:  #4g\n            accel=4\n        else:\n            accel=8\n        #test freq\n        if etat_comboBox_freq==0: #200Hz\n            freq=200\n        else:                       #400Hz\n            freq=400\n        param.append('accel')\n        param.append('freq')\n\n        return param\n\n\n#time.localtime()[0] pour avoir l'annee ou time.time() pour avoir le temps (s depuis 40 ans)\n\n\n\n          \n\n\n###----------------Fenetre REGLAGES avec relations\n        \nclass Interface_Reglages(QWidget): #pour une autre fenetre, ca peut etre QDialog ou QMainWindow ou QWidget\n    def __init__(self):\n        global begin\n        QWidget.__init__(self) #Appel explicite du constructeur de la classe mere, impose par python\n\n        #Instanciation et initialisation de l'interface Qt\n        self.ui2 = Ui_Reglages()\n        self.ui2.setupUi(self,begin)\n        \n        #initialisation combobox\n        self.ui2.comboBox_freq.setCurrentIndex(etat_comboBox_freq) #pour memoriser ce qui a ete fait avant\n        self.ui2.comboBox_accel.setCurrentIndex(etat_comboBox_accel)\n\n        self.connect(self.ui2.PushButton_retour, SIGNAL('clicked()'), self.action_retour)\n        self.connect(self.ui2.PushButton_valider, SIGNAL('clicked()'), self.action_valider)\n\n    def action_retour(self):\n        global interface2, begin, interface\n        print('go retour')\n        if not(begin):   #si on ne commence pas on peut faire retour\n            interface2=0 #sans enregistrer les modif\n        else:           #si on commence, retour est equivalent a quitter tout\n            interface=0\n            interface2=0\n        print(begin)\n\n    def action_valider(self):\n        global etat_comboBox_freq, etat_comboBox_accel, interface2, begin\n        print('go valider')\n        etat_comboBox_freq = self.ui2.comboBox_freq.currentIndex()\n        etat_comboBox_accel = self.ui2.comboBox_accel.currentIndex()\n        print(etat_comboBox_accel)\n        print(etat_comboBox_freq)\n        \n        Reglages_accelero.maj_reglages(etat_comboBox_accel,etat_comboBox_freq)  #on met a jour les reglages de l'accelero\n\n        begin=False   #on a donc fait un premier reglage\n        interface2=0\n\n    \n###Reglages.showFullScreen()\n###Reglages.showMaximized()\n\n#C:\\Users\\cyril\\Downloads\\WinPython-32bit-3.3.5.9\\python-3.3.5\\Lib\\site-packages\\PyQt4\\doc\\html   qcheckbox etc    \n\n\n\n###------------- Lesture du MAIN pour lancer l'algo\n\n#Test de l'application\nif __name__==\"__main__\":\n    appUI = QApplication(sys.argv) #Instanciation de l'application (pour intercepter les mouvements de souris etc...)\n    interface = Interface_Acquisition() #Instanciation de l'interface\n    #interface = Interface_Reglages()  #l'un ou l'autre pour les tests\n    ##interface.resize(680,320)\n    ##interface.showMaximized()  ##pas utile car n'est lu qu'une fois\n    interface.show() #Affichage de l'interface\n    sys.exit(appUI.exec_()) #Execution de l'application\n    \n \n"
    },
    {
        "view_class": "HelpView",
        "sequence": "ShowView",
        "view_id": 3037600848,
        "time": "2018-03-17T18:57:43.485650"
    },
    {
        "view_class": "ShellView",
        "sequence": "ShowView",
        "view_id": 3037469008,
        "time": "2018-03-17T18:57:43.489196"
    },
    {
        "tags": "('welcome',)",
        "sequence": "TextInsert",
        "text": "Python 3.4.2 (/usr/bin/python3)",
        "time": "2018-03-17T18:57:53.004720",
        "index": "1.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io',)",
        "sequence": "TextInsert",
        "text": "\n",
        "time": "2018-03-17T18:57:53.024995",
        "index": "1.31",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('toplevel', 'prompt')",
        "sequence": "TextInsert",
        "text": ">>> ",
        "time": "2018-03-17T18:57:53.033118",
        "index": "2.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "sequence": "<FocusIn>",
        "widget_id": 3059009840,
        "widget_class": "Workbench",
        "time": "2018-03-17T18:57:53.074580"
    },
    {
        "sequence": "<Button-1>",
        "widget_id": 3037542160,
        "widget_class": "CodeViewText",
        "time": "2018-03-17T18:58:00.117698",
        "text_widget_class": "CodeViewText",
        "text_widget_id": 3037542160
    },
    {
        "sequence": "<Button-1>",
        "widget_id": 3037542160,
        "widget_class": "CodeViewText",
        "time": "2018-03-17T18:58:02.487153",
        "text_widget_class": "CodeViewText",
        "text_widget_id": 3037542160
    },
    {
        "sequence": "<Button-1>",
        "widget_id": 3037542160,
        "widget_class": "CodeViewText",
        "time": "2018-03-17T18:58:04.358845",
        "text_widget_class": "CodeViewText",
        "text_widget_id": 3037542160
    },
    {
        "sequence": "<Button-1>",
        "widget_id": 3037542160,
        "widget_class": "CodeViewText",
        "time": "2018-03-17T18:58:05.673084",
        "text_widget_class": "CodeViewText",
        "text_widget_id": 3037542160
    },
    {
        "sequence": "<Button-1>",
        "widget_id": 3037542160,
        "widget_class": "CodeViewText",
        "time": "2018-03-17T18:58:06.935068",
        "text_widget_class": "CodeViewText",
        "text_widget_id": 3037542160
    },
    {
        "sequence": "<Button-1>",
        "widget_id": 3037497328,
        "widget_class": "Button",
        "time": "2018-03-17T18:58:10.190913"
    },
    {
        "sequence": "TextDelete",
        "index1": "2.4",
        "time": "2018-03-17T18:58:10.304538",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "index2": "3.0",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('automagic', 'toplevel', 'command')",
        "sequence": "TextInsert",
        "text": "%Run mainIHM_ebauche_finale.py\n",
        "time": "2018-03-17T18:58:10.311263",
        "index": "2.4",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "sequence": "TextDelete",
        "index1": "3.0",
        "time": "2018-03-17T18:58:10.325762",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "index2": "3.0",
        "text_widget_id": 3037469168
    },
    {
        "sequence": "MagicCommand",
        "cmd_line": "%Run mainIHM_ebauche_finale.py\n",
        "time": "2018-03-17T18:58:10.334217"
    },
    {
        "sequence": "ShellCommand",
        "command_text": "%Run mainIHM_ebauche_finale.py\n",
        "time": "2018-03-17T18:58:11.966088"
    },
    {
        "tags": "('io', 'stdout', 'vertically_spaced')",
        "sequence": "TextInsert",
        "text": "S",
        "time": "2018-03-17T18:58:22.678591",
        "index": "3.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "oft reset\n",
        "time": "2018-03-17T18:58:22.686259",
        "index": "3.1",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "Soft reset\n",
        "time": "2018-03-17T18:58:23.216100",
        "index": "4.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "Soft reset\n",
        "time": "2018-03-17T18:58:23.759861",
        "index": "5.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "Soft reset\n",
        "time": "2018-03-17T18:58:24.249869",
        "index": "6.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "go reglages\n",
        "time": "2018-03-17T18:58:31.219600",
        "index": "7.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "sequence": "<FocusOut>",
        "widget_id": 3059009840,
        "widget_class": "Workbench",
        "time": "2018-03-17T18:58:31.451493"
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "go retour\nTrue\n",
        "time": "2018-03-17T18:58:49.809181",
        "index": "8.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stderr')",
        "sequence": "TextInsert",
        "text": "Traceback (most recent call last):\n",
        "time": "2018-03-17T18:58:49.916409",
        "index": "10.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stderr')",
        "sequence": "TextInsert",
        "text": "  ",
        "time": "2018-03-17T18:58:49.963712",
        "index": "11.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stderr', 'hyperlink')",
        "sequence": "TextInsert",
        "text": "File \"/media/pi/USB DISK/ENSAM/2A/Projet Raspberry/Programmation/IHM/mainIHM_ebauche_finale.py\", line 322, in <module>",
        "time": "2018-03-17T18:58:49.969558",
        "index": "11.2",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stderr')",
        "sequence": "TextInsert",
        "text": "\n",
        "time": "2018-03-17T18:58:49.985605",
        "index": "11.120",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stderr')",
        "sequence": "TextInsert",
        "text": "    sys.exit(appUI.exec_()) #Execution de l'application\n",
        "time": "2018-03-17T18:58:49.991532",
        "index": "12.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stderr')",
        "sequence": "TextInsert",
        "text": "SystemExit: 0\n",
        "time": "2018-03-17T18:58:49.997780",
        "index": "13.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "sequence": "<FocusIn>",
        "widget_id": 3059009840,
        "widget_class": "Workbench",
        "time": "2018-03-17T18:58:50.141543"
    },
    {
        "tags": "('toplevel', 'prompt', 'vertically_spaced')",
        "sequence": "TextInsert",
        "text": ">>> ",
        "time": "2018-03-17T18:58:52.116622",
        "index": "14.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "sequence": "<Button-1>",
        "widget_id": 3037497328,
        "widget_class": "Button",
        "time": "2018-03-17T18:58:57.178598"
    },
    {
        "sequence": "TextDelete",
        "index1": "14.4",
        "time": "2018-03-17T18:58:57.306305",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "index2": "15.0",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('automagic', 'toplevel', 'command')",
        "sequence": "TextInsert",
        "text": "%Run mainIHM_ebauche_finale.py\n",
        "time": "2018-03-17T18:58:57.313204",
        "index": "14.4",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "sequence": "TextDelete",
        "index1": "15.0",
        "time": "2018-03-17T18:58:57.327668",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "index2": "15.0",
        "text_widget_id": 3037469168
    },
    {
        "sequence": "MagicCommand",
        "cmd_line": "%Run mainIHM_ebauche_finale.py\n",
        "time": "2018-03-17T18:58:57.336097"
    },
    {
        "sequence": "ShellCommand",
        "command_text": "%Run mainIHM_ebauche_finale.py\n",
        "time": "2018-03-17T18:58:59.090526"
    },
    {
        "tags": "('io', 'stdout', 'vertically_spaced')",
        "sequence": "TextInsert",
        "text": "S",
        "time": "2018-03-17T18:59:09.943588",
        "index": "15.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "oft reset\n",
        "time": "2018-03-17T18:59:09.951090",
        "index": "15.1",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "Soft reset\n",
        "time": "2018-03-17T18:59:10.498473",
        "index": "16.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "Soft reset\n",
        "time": "2018-03-17T18:59:11.044243",
        "index": "17.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "Soft reset\n",
        "time": "2018-03-17T18:59:11.520929",
        "index": "18.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "go reglages\n",
        "time": "2018-03-17T18:59:18.411965",
        "index": "19.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "sequence": "<FocusOut>",
        "widget_id": 3059009840,
        "widget_class": "Workbench",
        "time": "2018-03-17T18:59:18.921456"
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "go valider\n0\n0\n00010100\n0x14\n",
        "time": "2018-03-17T18:59:25.319949",
        "index": "20.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "equal\n",
        "time": "2018-03-17T18:59:25.482952",
        "index": "25.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "go reglages\n",
        "time": "2018-03-17T18:59:41.439367",
        "index": "26.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "go valider\n1\n0\n01010100\n0x54\n",
        "time": "2018-03-17T18:59:51.270899",
        "index": "27.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "OK\n",
        "time": "2018-03-17T18:59:51.370032",
        "index": "32.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "go exporter\nadresse fichier :  /home/pi/Documents/Mesures/17:03:2018-18:59:53.txt\nleafpad /home/pi/Documents/Mesures/17:03:2018-18:59:53.txt\n",
        "time": "2018-03-17T18:59:53.841093",
        "index": "33.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stdout')",
        "sequence": "TextInsert",
        "text": "go fermer\n",
        "time": "2018-03-17T19:00:47.187309",
        "index": "36.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "sequence": "<FocusIn>",
        "widget_id": 3059009840,
        "widget_class": "Workbench",
        "time": "2018-03-17T19:00:47.251949"
    },
    {
        "tags": "('io', 'stderr')",
        "sequence": "TextInsert",
        "text": "Traceback (most recent call last):\n",
        "time": "2018-03-17T19:00:47.316553",
        "index": "37.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stderr')",
        "sequence": "TextInsert",
        "text": "  ",
        "time": "2018-03-17T19:00:47.322875",
        "index": "38.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stderr', 'hyperlink')",
        "sequence": "TextInsert",
        "text": "File \"/media/pi/USB DISK/ENSAM/2A/Projet Raspberry/Programmation/IHM/mainIHM_ebauche_finale.py\", line 322, in <module>",
        "time": "2018-03-17T19:00:47.328694",
        "index": "38.2",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stderr')",
        "sequence": "TextInsert",
        "text": "\n",
        "time": "2018-03-17T19:00:47.334863",
        "index": "38.120",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stderr')",
        "sequence": "TextInsert",
        "text": "    sys.exit(appUI.exec_()) #Execution de l'application\n",
        "time": "2018-03-17T19:00:47.340850",
        "index": "39.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('io', 'stderr')",
        "sequence": "TextInsert",
        "text": "SystemExit: 0\n",
        "time": "2018-03-17T19:00:47.346806",
        "index": "40.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "tags": "('toplevel', 'prompt', 'vertically_spaced')",
        "sequence": "TextInsert",
        "text": ">>> ",
        "time": "2018-03-17T19:00:49.407451",
        "index": "41.0",
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "text_widget_id": 3037469168
    },
    {
        "sequence": "<Button-1>",
        "time": "2018-03-17T19:00:52.119875",
        "widget": ".#3038344944"
    }
]