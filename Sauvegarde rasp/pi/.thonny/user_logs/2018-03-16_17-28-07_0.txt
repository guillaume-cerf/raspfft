[
    {
        "time": "2018-03-16T17:28:08.531412",
        "view_id": "HelpView",
        "view_class": "HelpView",
        "sequence": "ShowView"
    },
    {
        "text_widget_class": "CodeViewText",
        "text_widget_id": 3037431280,
        "sequence": "EditorTextCreated",
        "editor_id": 3037431696,
        "time": "2018-03-16T17:28:09.155963",
        "editor_class": "Editor"
    },
    {
        "editor_id": 3037431696,
        "text_widget_class": "CodeViewText",
        "text_widget_id": 3037431280,
        "sequence": "Open",
        "filename": "/media/pi/USB DISK/ENSAM/GIE2/Projet Raspberry/Programmation/Tests/test_fft.py",
        "time": "2018-03-16T17:28:09.173123",
        "editor_class": "Editor"
    },
    {
        "index1": "1.0",
        "index2": "2.0",
        "text_widget_id": 3037431280,
        "sequence": "TextDelete",
        "time": "2018-03-16T17:28:10.178493",
        "text_widget_class": "CodeViewText"
    },
    {
        "text": "from numpy import linspace,sin\nfrom numpy import fft  #from scipy.fftpack import fft\nfrom matplotlib.pyplot import *\n\n\nN=30\nxmax=2\nX=linspace(0,xmax,N)\nte=xmax/(N-1)\nfe=1/te\nY=[]\nfor i in range(N):\n    Y.append(sin(12*X[i])+2*sin(24*X[i])) #periode T=2TT/6 donc 1 et f=6/2TT = 1\n\nF=linspace(0,fe,N) #ie un pas de fe/(N-1)\n\nTF=2*abs(fft.fft(Y))/N  #toujours 2/N pour avoir la bonne amplitude\nprint(TF)\nprint(fe)\nprint(te)\n\nsubplot(121)    \nplot(X,Y)\nhold()\nsubplot(122)    \nplot(F[0:N//2],TF[0:N//2])\nshow()\n",
        "index": "1.0",
        "text_widget_id": 3037431280,
        "sequence": "TextInsert",
        "time": "2018-03-16T17:28:10.373011",
        "tags": "()",
        "text_widget_class": "CodeViewText"
    },
    {
        "time": "2018-03-16T17:28:10.451295",
        "view_id": "HelpView",
        "view_class": "HelpView",
        "sequence": "ShowView"
    },
    {
        "time": "2018-03-16T17:28:10.454941",
        "view_id": "ShellView",
        "view_class": "ShellView",
        "sequence": "ShowView"
    },
    {
        "text": "Python 3.4.2 (/usr/bin/python3)",
        "index": "1.0",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:13.899441",
        "tags": "('welcome',)",
        "text_widget_class": "ShellText"
    },
    {
        "text": "\n",
        "index": "1.31",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:13.919697",
        "tags": "('io',)",
        "text_widget_class": "ShellText"
    },
    {
        "text": ">>> ",
        "index": "2.0",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:13.927694",
        "tags": "('toplevel', 'prompt')",
        "text_widget_class": "ShellText"
    },
    {
        "widget_class": "Workbench",
        "widget_id": 3058899248,
        "time": "2018-03-16T17:28:13.971630",
        "sequence": "<FocusIn>"
    },
    {
        "time": "2018-03-16T17:28:16.618772",
        "widget": ".#3038238384",
        "sequence": "<Button-1>"
    },
    {
        "widget_class": "Workbench",
        "widget_id": 3058899248,
        "time": "2018-03-16T17:28:16.669519",
        "sequence": "<FocusOut>"
    },
    {
        "time": "2018-03-16T17:28:17.558425",
        "widget": ".#3038238384",
        "sequence": "<Button-1>"
    },
    {
        "time": "2018-03-16T17:28:19.401031",
        "widget": ".#3038238384.#3038238384#3041689904",
        "sequence": "<Button-1>"
    },
    {
        "command_id": "close_file",
        "time": "2018-03-16T17:28:19.618713",
        "denied": "False",
        "sequence": "Command"
    },
    {
        "widget_class": "Workbench",
        "widget_id": 3058899248,
        "time": "2018-03-16T17:28:19.622408",
        "sequence": "<FocusIn>"
    },
    {
        "time": "2018-03-16T17:28:21.362182",
        "widget": ".#3038238384",
        "sequence": "<Button-1>"
    },
    {
        "widget_class": "Workbench",
        "widget_id": 3058899248,
        "time": "2018-03-16T17:28:21.447063",
        "sequence": "<FocusOut>"
    },
    {
        "time": "2018-03-16T17:28:22.960740",
        "widget": ".#3038238384.#3038238384#3041689904",
        "sequence": "<Button-1>"
    },
    {
        "widget_class": "Workbench",
        "widget_id": 3058899248,
        "time": "2018-03-16T17:28:23.604211",
        "sequence": "<FocusIn>"
    },
    {
        "widget_class": "Workbench",
        "widget_id": 3058899248,
        "time": "2018-03-16T17:28:23.725801",
        "sequence": "<FocusOut>"
    },
    {
        "time": "2018-03-16T17:28:32.093187",
        "widget": ".__tk_filedialog.contents.f1.up",
        "sequence": "<Button-1>"
    },
    {
        "time": "2018-03-16T17:28:33.997284",
        "widget": ".__tk_filedialog.contents.icons.cHull.canvas",
        "sequence": "<Button-1>"
    },
    {
        "time": "2018-03-16T17:28:34.708103",
        "widget": ".__tk_filedialog.contents.icons.cHull.canvas",
        "sequence": "<Button-1>"
    },
    {
        "time": "2018-03-16T17:28:35.302804",
        "widget": ".__tk_filedialog.contents.icons.cHull.canvas",
        "sequence": "<Button-1>"
    },
    {
        "time": "2018-03-16T17:28:35.498466",
        "widget": ".__tk_filedialog.contents.icons.cHull.canvas",
        "sequence": "<Button-1>"
    },
    {
        "time": "2018-03-16T17:28:36.378419",
        "widget": ".__tk_filedialog.contents.icons.cHull.canvas",
        "sequence": "<Button-1>"
    },
    {
        "time": "2018-03-16T17:28:36.578366",
        "widget": ".__tk_filedialog.contents.icons.cHull.canvas",
        "sequence": "<Button-1>"
    },
    {
        "text_widget_class": "CodeViewText",
        "text_widget_id": 3037488560,
        "sequence": "EditorTextCreated",
        "editor_id": 3037384304,
        "time": "2018-03-16T17:28:41.632828",
        "editor_class": "Editor"
    },
    {
        "editor_id": 3037384304,
        "text_widget_class": "CodeViewText",
        "text_widget_id": 3037488560,
        "sequence": "Open",
        "filename": "/media/pi/USB DISK/ENSAM/GIE2/Projet Raspberry/Programmation/IHM/mainIHM.py",
        "time": "2018-03-16T17:28:41.638555",
        "editor_class": "Editor"
    },
    {
        "index1": "1.0",
        "index2": "2.0",
        "text_widget_id": 3037488560,
        "sequence": "TextDelete",
        "time": "2018-03-16T17:28:41.653179",
        "text_widget_class": "CodeViewText"
    },
    {
        "text": "import sys #impose par QT\nimport os\nfrom PyQt4.QtCore import * #impose par QT\nfrom PyQt4.QtGui import * #impose par QT\nfrom PyQt4 import *\n#import tkinter\nfrom page_reglages import Ui_Reglages\nfrom page_acquisitionzaloeil import Ui_Acquisition\nfrom numpy import linspace,sin\nfrom numpy import fft  #OU from scipy.fftpack import fft #on fait enuite uniquement fft(blabla)\nfrom random import *  #pour les donnees fictives\n\n##------------ Fenetre ACQUISITION avec relations\n\nclass Interface_Acquisition(QWidget): #pour une autre fenetre, ca peut etre QDialog ou QMainWindow ou QWidget\n    def __init__(self):\n        QWidget.__init__(self) #Appel explicite du constructeur de la classe mere, impose par python\n\n        #Instanciation et initialisation de l'interface Qt\n        self.ui = Ui_Acquisition() #class creee par Qt METTRE UN VRAI NOM\n        self.ui.setupUi(self)       #on lance la fonction definie dans la class\n\n        #initialisation parametres\n        global etat_comboBox_freq, etat_comboBox_accel   #en global pour dialoguer entre acquisition et reglages\n\n        self.ui.checkBox_accelx.setChecked(True) #par defaut coche ---- setChecked ou setCheckState\n        self.ui.checkBox_accely.setChecked(True) #par defaut coche\n        self.ui.checkBox_accelz.setCheckState(False) #par defaut non coche\n        self.ui.comboBox_FourrierTempo.setCurrentIndex(0) #par defaut indice 0 donc temporel\n        self.ui.progressBar.setValue(0)  #pour dire quelle valeur mettre (de 0 a 100) ou .value() pour consulter\n        etat_comboBox_freq = 0 #par defaut 200Hz\n        etat_comboBox_accel = 0 #par defaut 2g\n        \n        self.T =[]  #ensemble des temps\n        self.F=[]   #futur ensemble des frequences pour fft\n        self.A1=[]  #ensemble des accel en x\n        self.A2=[]  #ensemble des accel en y\n        self.A3=[]  #ensemble des accel en z\n        self.Atot=[] #equivalent sortie accelero\n        self.TF1 =[] #futur ensemble des TF pour A1\n        self.TF2 =[] #futur ensemble des TF pour A2\n        self.TF3 =[] #futur ensemble des TF pour A3\n        \n        self.ui.matplotlibwidget.axes.set_title('Accelerations')\n        self.ui.matplotlibwidget.axes.set_ylabel('Amplitude') #ou xscale\n        self.ui.matplotlibwidget.axes.set_xlabel('t(s) ou f(Hz)')\n        \n        # definition relations\n        self.connect(self.ui.PushButton_Fermer, SIGNAL('clicked()'), self.action_Fermer)\n        self.connect(self.ui.PushButton_Nouveau, SIGNAL('clicked()'), self.action_Nouveau)\n        self.connect(self.ui.PushButton_Reglages, SIGNAL('clicked()'), self.action_Reglages)\n        self.connect(self.ui.PushButton_Exporter, SIGNAL('clicked()'), self.action_Exporter)\n        self.connect(self.ui.comboBox_FourrierTempo, SIGNAL('currentIndexChanged(int)'), self.action_modif_affichage)\n        self.connect(self.ui.checkBox_accelx, SIGNAL('clicked()'), self.action_modif_affichage) #ou stateChanged(int)\n        self.connect(self.ui.checkBox_accely, SIGNAL('clicked()'), self.action_modif_affichage)\n        self.connect(self.ui.checkBox_accelz, SIGNAL('clicked()'), self.action_modif_affichage)\n        \n    def action_Fermer(self):\n        global interface\n        print('go fermer')\n        interface=0 #sans espace\n        \n    def action_Nouveau(self):\n        print('go nouveau')\n        self.ui.progressBar.setValue(0) #mise a 0\n        self.acquerir()    \n        self.afficher()\n        self.ui.progressBar.setValue(100) #mise a 100 fictive\n        \n    def action_Reglages(self):\n        global interface2\n        print('go reglages')\n        interface2 = Interface_Reglages()\n        interface2.show()\n        \n    def action_Exporter(self):\n        print('go exporter')\n        self.memorise_txt()\n        os.popen(\"recuperation_donnees.txt\")\n        \n\n        \n    def action_modif_affichage(self):\n        print(self.ui.checkBox_accelx.checkState()) #renvoie 0 ou 2\n        print(self.ui.checkBox_accely.checkState())\n        print(self.ui.checkBox_accelz.checkState())\n        print(self.ui.comboBox_FourrierTempo.currentIndex())  # .currentText  ou .currentIndex(0 ou 1)\n        self.afficher()\n\n\n    def acquerir(self):#test matplotlib\n        \"\"\"a pour but d'acquerir les donnees accelero\"\"\"\n        N=randint(80,100)\n        tmax = 2\n        fe=(N-1)/tmax\n        self.T = linspace(0,tmax,N)\n        self.F = linspace(0,fe,N)\n        self.F=self.F[0:N//2] #on coupe a la moitie pour non redondance dans l'affichage\n            \n\n        A = self.calcul_sin(self.T) #acquisition donnees fictives\n        self.A1=A[0]  #accel en x\n        self.A2=A[1]\n        self.A3=A[2]\n        self.Atot=A[3]  #cumul accel type sortie accelero\n\n        self.TF1=2*abs(fft.fft(self.A1))/N  #TF de l'acceleration en x\n        self.TF1=self.TF1[0:N//2]\n        self.TF2=2*abs(fft.fft(self.A2))/N  #TF de l'acceleration en y\n        self.TF2=self.TF2[0:N//2]\n        self.TF3=2*abs(fft.fft(self.A3))/N  #TF de l'acceleration en z\n        self.TF3=self.TF3[0:N//2]\n\n        for i in range(N):   ##on raccourci les nombres en CS\n            self.T[i]=self.nCS(self.T[i])\n            if i<N//2:\n                self.F[i]=self.nCS(self.F[i])\n                self.TF1[i]=self.nCS(self.TF1[i])\n                self.TF2[i]=self.nCS(self.TF2[i])\n                self.TF3[i]=self.nCS(self.TF3[i])\n        \n    def afficher(self):\n        \"\"\"affiche le graphe avec les courbes choisies\"\"\"\n        self.X1=[]\n        self.X2=[]\n        self.X3=[]\n        self.Y1=[] #on affichera tout le temps X1,X2,X3,Y1,Y2,Y3 quitte a etre vide, sont nos variables d'affiachage\n        self.Y2=[]\n        self.Y3=[]\n        self.c1=self.ui.checkBox_accelx.checkState() #lecture etat checkbox 0 ou 2\n        self.c2=self.ui.checkBox_accely.checkState()\n        self.c3=self.ui.checkBox_accelz.checkState()\n        self.c4=self.ui.comboBox_FourrierTempo.currentIndex() #1 pour Fourrier et 0 pour temporel\n        \n        if self.c1==2 and self.c4==0:  #si accelx coche et temporel\n            self.Y1=self.A1\n            self.X1=self.T\n        if self.c2==2 and self.c4==0:\n            self.Y2=self.A2\n            self.X2=self.T\n        if self.c3==2 and self.c4==0:\n            self.Y3=self.A3\n            self.X3=self.T\n\n        if self.c1==2 and self.c4==1:  #si accelx coche et Fourrier\n            self.Y1=self.TF1\n            self.X1=self.F\n        if self.c2==2 and self.c4==1:\n            self.Y2=self.TF2\n            self.X2=self.F\n        if self.c3==2 and self.c4==1:\n            self.Y3=self.TF3\n            self.X3=self.F\n\n            \n        self.ui.matplotlibwidget.axes.hold(False) #on tej le plot precedent et n'est pas ce qui supprime les titres  \n        self.ui.matplotlibwidget.axes.plot(self.X1,self.Y1,'r-')   # . pour avoir les points et - pour les relier --> par exemple'r.-'  \n        self.ui.matplotlibwidget.axes.hold(True) #on maintient\n        self.ui.matplotlibwidget.axes.plot(self.X2,self.Y2,'b-')\n        self.ui.matplotlibwidget.axes.hold(True)\n        self.ui.matplotlibwidget.axes.plot(self.X3,self.Y3,'g-')\n        \n        self.ui.matplotlibwidget.axes.set_title('Accelerations') #a repeter car supprimer par le replot\n        self.ui.matplotlibwidget.axes.set_ylabel('Amplitude') #ou xscale\n        self.ui.matplotlibwidget.axes.set_xlabel('t(s) ou f(Hz)')\n        \n        self.ui.matplotlibwidget.draw() ##important\n        \n    def calcul_sin(self,T):\n        A1=[]\n        A2=[]  #sont des intermediaires de la fonction (pas de self)\n        A3=[]\n        L=[]\n        amplitude=[2*random(),4*random(),3*random()]\n        for i in T:\n            a1,a2,a3=self.nCS(amplitude[0]*sin(3*i)),self.nCS(amplitude[1]*sin(6*i+1)),self.nCS(amplitude[2]*sin(12*i+2))  #2pi/T = 3 ie T=2\n            A1.append(a1)\n            A2.append(a2)\n            A3.append(a3)\n            L.append([a1,a2,a3]) #donnees fictives accelero\n        return [A1,A2,A3,L]\n    \n    def nCS(self,nombre):\n        \"\"\"reduit les chiffres signicatifs a n\"\"\"\n        n=3\n        facteur=10**n\n        return int(facteur*nombre)/facteur\n    \n    def memorise_txt(self): #il faut avoir fait nouveau pour tester\n        \"\"\"passe les donnees dans un fichier txt\"\"\"\n        fich=open('recuperation_donnees.txt','w')\n        fich.write('t(s)                Ax(m/s2)            Ay(m/s2)               Az(m/s2)             F(Hz)              TF(Ax)               TF(Ay)          TF(Az)\\n')\n        for i in range(len(self.T)):\n            a,b,c,d=str(self.T[i]),str(self.Atot[i][0]),str(self.Atot[i][1]),str(self.Atot[i][2])\n            if i<len(self.F):\n                e,f,g,h=str(self.F[i]),str(self.TF1[i]),str(self.TF2[i]),str(self.TF3[i])\n            else:\n                e,f,g,h='','','',''\n            fich.write(a)\n            fich.write('                ') ##avec 4 tabulations tout le temps pour bien separer et avoir un passage propre sur excel\n            fich.write(b)\n            fich.write('                ')\n            fich.write(c)\n            fich.write('                ')\n            fich.write(d)\n            fich.write('                ')\n            fich.write(e)\n            fich.write('                ')\n            fich.write(f)\n            fich.write('                ')\n            fich.write(g)\n            fich.write('                ')\n            fich.write(h)\n            fich.write('\\n')\n        fich.close()\n\n\n\n###----------------Fenetre REGLAGES avec relations\n        \nclass Interface_Reglages(QWidget): #pour une autre fenetre, ca peut etre QDialog ou QMainWindow ou QWidget\n    def __init__(self):\n        QWidget.__init__(self) #Appel explicite du constructeur de la classe mere, impose par python\n\n        #Instanciation et initialisation de l'interface Qt\n        self.ui2 = Ui_Reglages()\n        self.ui2.setupUi(self)\n        #initialisation combobox\n        self.ui2.comboBox_freq.setCurrentIndex(etat_comboBox_freq) #pour memoriser ce qui a ete fait avant\n        self.ui2.comboBox_accel.setCurrentIndex(etat_comboBox_accel)\n\n        self.connect(self.ui2.PushButton_retour, SIGNAL('clicked()'), self.action_retour)\n        self.connect(self.ui2.PushButton_valider, SIGNAL('clicked()'), self.action_valider)\n\n    def action_retour(self):\n        global interface2\n        print('go retour')\n        interface2=0 #sans enregistrer les modif\n\n    def action_valider(self):\n        global etat_comboBox_freq, etat_comboBox_accel, interface2\n        print('go valider')\n        etat_comboBox_freq = self.ui2.comboBox_freq.currentIndex()\n        etat_comboBox_accel = self.ui2.comboBox_accel.currentIndex()\n        print(etat_comboBox_accel)\n        print(etat_comboBox_freq)\n        interface2=0  #il faudra faire de vraies modif sur l'accelero\n    \n###Reglages.showFullScreen()\n###Reglages.showMaximized()\n\n#C:\\Users\\cyril\\Downloads\\WinPython-32bit-3.3.5.9\\python-3.3.5\\Lib\\site-packages\\PyQt4\\doc\\html   qcheckbox etc    \n\n\n\n###------------- Lesture du MAIN pour lancer l'algo\n\n#Test de l'application\nif __name__==\"__main__\":\n    appUI = QApplication(sys.argv) #Instanciation de l'application (pour intercepter les mouvements de souris etc...)\n    interface = Interface_Acquisition() #Instanciation de l'interface\n    #interface = Interface_Reglages()  #l'un ou l'autre pour les tests\n    ##interface.resize(680,320)\n    ##interface.showMaximized()  ##pas utile car n'est lu qu'une fois\n    interface.show() #Affichage de l'interface\n    sys.exit(appUI.exec_()) #Execution de l'application\n    \n",
        "index": "1.0",
        "text_widget_id": 3037488560,
        "sequence": "TextInsert",
        "time": "2018-03-16T17:28:41.773135",
        "tags": "()",
        "text_widget_class": "CodeViewText"
    },
    {
        "command_id": "open_file",
        "time": "2018-03-16T17:28:41.944090",
        "denied": "False",
        "sequence": "Command"
    },
    {
        "widget_class": "Workbench",
        "widget_id": 3058899248,
        "time": "2018-03-16T17:28:41.951480",
        "sequence": "<FocusIn>"
    },
    {
        "time": "2018-03-16T17:28:50.865121",
        "widget": ".#3038238384",
        "sequence": "<Button-1>"
    },
    {
        "widget_class": "Workbench",
        "widget_id": 3058899248,
        "time": "2018-03-16T17:28:50.966432",
        "sequence": "<FocusOut>"
    },
    {
        "index1": "2.4",
        "index2": "3.0",
        "text_widget_id": 3037355280,
        "sequence": "TextDelete",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:54.124615",
        "text_widget_class": "ShellText"
    },
    {
        "text": "%cd '/media/pi/USB DISK/ENSAM/GIE2/Projet Raspberry/Programmation/IHM'\n%Run mainIHM.py\n",
        "index": "2.4",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:54.131446",
        "tags": "('automagic', 'toplevel', 'command')",
        "text_widget_class": "ShellText"
    },
    {
        "index1": "4.0",
        "index2": "4.0",
        "text_widget_id": 3037355280,
        "sequence": "TextDelete",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:54.146617",
        "text_widget_class": "ShellText"
    },
    {
        "time": "2018-03-16T17:28:54.156400",
        "cmd_line": "%cd '/media/pi/USB DISK/ENSAM/GIE2/Projet Raspberry/Programmation/IHM'\n",
        "sequence": "MagicCommand"
    },
    {
        "command_text": "%cd '/media/pi/USB DISK/ENSAM/GIE2/Projet Raspberry/Programmation/IHM'\n",
        "time": "2018-03-16T17:28:54.173592",
        "sequence": "ShellCommand"
    },
    {
        "command_id": "run_current_script",
        "time": "2018-03-16T17:28:54.174474",
        "denied": "False",
        "sequence": "Command"
    },
    {
        "text": ">>> ",
        "index": "3.0",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:54.188689",
        "tags": "('toplevel', 'prompt')",
        "text_widget_class": "ShellText"
    },
    {
        "index1": "4.0",
        "index2": "4.0",
        "text_widget_id": 3037355280,
        "sequence": "TextDelete",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:54.198089",
        "text_widget_class": "ShellText"
    },
    {
        "time": "2018-03-16T17:28:54.205428",
        "cmd_line": "%Run mainIHM.py\n",
        "sequence": "MagicCommand"
    },
    {
        "command_text": "%Run mainIHM.py\n",
        "time": "2018-03-16T17:28:55.785356",
        "sequence": "ShellCommand"
    },
    {
        "text": "T",
        "index": "4.0",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:57.116063",
        "tags": "('io', 'stderr', 'vertically_spaced')",
        "text_widget_class": "ShellText"
    },
    {
        "text": "raceback (most recent call last):\n",
        "index": "4.1",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:57.124020",
        "tags": "('io', 'stderr')",
        "text_widget_class": "ShellText"
    },
    {
        "text": "  ",
        "index": "5.0",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:57.130158",
        "tags": "('io', 'stderr')",
        "text_widget_class": "ShellText"
    },
    {
        "text": "File \"/media/pi/USB DISK/ENSAM/GIE2/Projet Raspberry/Programmation/IHM/mainIHM.py\", line 8, in <module>",
        "index": "5.2",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:57.136020",
        "tags": "('io', 'stderr', 'hyperlink')",
        "text_widget_class": "ShellText"
    },
    {
        "text": "\n",
        "index": "5.105",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:57.141939",
        "tags": "('io', 'stderr')",
        "text_widget_class": "ShellText"
    },
    {
        "text": "    from page_acquisitionzaloeil import Ui_Acquisition\n",
        "index": "6.0",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:57.147943",
        "tags": "('io', 'stderr')",
        "text_widget_class": "ShellText"
    },
    {
        "text": "  ",
        "index": "7.0",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:57.154050",
        "tags": "('io', 'stderr')",
        "text_widget_class": "ShellText"
    },
    {
        "text": "File \"/media/pi/USB DISK/ENSAM/GIE2/Projet Raspberry/Programmation/IHM/page_acquisitionzaloeil.py\", line 10, in <module>",
        "index": "7.2",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:57.159922",
        "tags": "('io', 'stderr', 'hyperlink')",
        "text_widget_class": "ShellText"
    },
    {
        "text": "\n",
        "index": "7.122",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:57.169260",
        "tags": "('io', 'stderr')",
        "text_widget_class": "ShellText"
    },
    {
        "text": "    from matplotlibwidget import MatplotlibWidget ####evite probleme en allant sur raspberry : a \u00e9t\u00e9 copi\u00e9 dans le dossier \"Projet Raspberry\" et est \u00e0 mettre sur cl\u00e9 USB\n",
        "index": "8.0",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:57.175318",
        "tags": "('io', 'stderr')",
        "text_widget_class": "ShellText"
    },
    {
        "text": "ImportError: No module named 'matplotlibwidget'\n",
        "index": "9.0",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:57.181297",
        "tags": "('io', 'stderr')",
        "text_widget_class": "ShellText"
    },
    {
        "text": ">>> ",
        "index": "10.0",
        "text_widget_id": 3037355280,
        "sequence": "TextInsert",
        "text_widget_context": "shell",
        "time": "2018-03-16T17:28:57.213785",
        "tags": "('toplevel', 'prompt', 'vertically_spaced')",
        "text_widget_class": "ShellText"
    },
    {
        "time": "2018-03-16T17:29:08.286394",
        "widget": ".#3038238384",
        "sequence": "<Button-1>"
    },
    {
        "widget_class": "Workbench",
        "widget_id": 3058899248,
        "time": "2018-03-16T17:29:08.392322",
        "sequence": "<FocusIn>"
    }
]